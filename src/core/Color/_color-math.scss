//
// Copyright (c) 2021 SurPath Hub
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//

@use 'sass:math';

@function pow($number, $exponent) {
    @if (round($exponent) != $exponent) {
        @return exp($exponent * ln($number));
    }

    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    } @else if $exponent < 0 {
        @for $i from 1 through -$exponent {
            $value: $value / $number;
        }
    }

    @return $value;
}

@function factorial($value) {
    $result: 1;

    @if $value == 0 {
        @return $result;
    }

    @for $index from 1 through $value {
        $result: $result * $index;
    }

    @return $result;
}

@function summation($iteratee, $input, $initial: 0, $limit: 100) {
    $sum: 0;

    @for $index from $initial to $limit {
        $sum: $sum + call(get-function($iteratee), $input, $index);
    }

    @return $sum;
}

@function exp-maclaurin($x, $n) {
    @return math.div(pow($x, $n), factorial($n));
}

@function exp($value) {
    @return summation('exp-maclaurin', $value, 0, 100);
}

@function ln-maclaurin($x, $n) {
    @return (math.div(pow(-1, $n + 1), $n)) * (pow($x - 1, $n));
}

@function ln($value) {
    $ten-exp: 1;
    $ln-ten: 2.30258509;

    @while ($value > pow(10, $ten-exp)) {
        $ten-exp: $ten-exp + 1;
    }

    @return summation(ln-maclaurin, math.div($value, pow(10, $ten-exp)), 1, 100) + $ten-exp * $ln-ten;
}